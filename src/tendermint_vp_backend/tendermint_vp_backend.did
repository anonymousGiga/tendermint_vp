type SmState = record {
  client_state: vec nat8;
  consensus_state: vec nat8;
};

type Proofs = record {
  height: text;
  object_proof: vec nat8;
  sm_client_state: vec nat8;
  client_state_proof: vec nat8;
  consensue_height: text;
  consensus_state_proof: vec nat8;
};

service : {
  public_key : () -> (variant { Ok: vec nat8; Err: text });
  sign : (vec nat8) -> (variant { Ok: record { signature_hex: text; }; Err: text });
  verify : (text, text, text) -> (variant { Ok: record { is_signature_valid: bool; }; Err: text });

  start: () -> (variant { Ok: null; Err: text });
  restart: () -> (variant { Ok: null; Err: text });

  create_client: (vec nat8) -> (variant { Ok: SmState; Err: text });
  update_client: (vec nat8) -> (variant { Ok: vec nat8; Err: text });

  conn_open_init: (vec nat8) -> (variant { Ok: null; Err: text });
  conn_open_try: (vec nat8) -> (variant { Ok: Proofs; Err: text });
  conn_open_ack: (vec nat8) -> (variant { Ok: Proofs; Err: text });
  conn_open_confirm: (vec nat8) -> (variant { Ok: Proofs; Err: text });

  chan_open_init: (vec nat8) -> (variant { Ok: null; Err: text });
  chan_open_try: (vec nat8, text, text, vec nat8) -> (variant { Ok: Proofs; Err: text });
  chan_open_ack: (vec nat8, text, text, vec nat8) -> (variant { Ok: Proofs; Err: text });
  chan_open_confirm: (vec nat8, text, text, vec nat8) -> (variant { Ok: Proofs; Err: text });
  chan_close_init: (vec nat8) -> (variant { Ok: null; Err: text });

  recv_packet: (vec nat8) -> (variant { Ok: Proofs; Err: text });
  ack_packet: (vec nat8) -> (variant { Ok: Proofs; Err: text });

  get_sequence_times: (nat64) -> (variant { Ok: nat64; Err: text });

  test2: () -> (variant { Ok: null; Err: text });
  test3: () -> (variant { Ok: null; Err: text });
}
